#!/usr/bin/env node
import{Command as eo}from"commander";import{Command as H}from"commander";import{existsSync as D}from"fs";import V from"ora";import K from"path";import Q from"chalk";import X from"prompts";import{z as y}from"zod";import A from"async-retry";import c from"chalk";import Y from"fs";import u from"path";import{createWriteStream as O,promises as b}from"fs";import S from"got";import{tmpdir as z}from"os";import{join as F}from"path";import{Stream as G}from"stream";import v from"tar";import{promisify as W}from"util";var q=W(G.pipeline);async function R(e){let o=F(z(),`next.js-cna-example.temp-${Date.now()}`);return await q(S.stream(e),O(o)),o}async function I(e,{username:o,name:t,branch:r,filePath:n}){let i=await R(`https://codeload.github.com/${o}/${t}/tar.gz/${r}`);await v.x({file:i,cwd:e,strip:n?n.split("/").length+1:1,filter:s=>s.startsWith(`${t}-${r.replace(/\//g,"-")}${n?`/${n}/`:"/"}`)}),await b.unlink(i)}async function k(e,o){if(o==="__internal-testing-retry")throw new Error("This is an internal example for testing the CLI.");let t=await R("https://codeload.github.com/vercel/next.js/tar.gz/canary");await v.x({file:t,cwd:e,strip:2+o.split("/").length,filter:r=>r.includes(`next.js-canary/examples/${o}/`)}),await b.unlink(t)}import j from"got";async function w(e){return(await j.head(e).catch(t=>t)).statusCode===200}async function P(e,o){let[,t,r,n,i,...s]=e.pathname.split("/"),l=o?o.replace(/^\//,""):s.join("/");if(n===void 0||n===""&&i===void 0){let d=await j(`https://api.github.com/repos/${t}/${r}`).catch(m=>m);if(d.statusCode!==200)return;let a=JSON.parse(d.body);return{username:t,name:r,branch:a.default_branch,filePath:l}}let f=o?`${i}/${s.join("/")}`.replace(new RegExp(`/${l}|/$`),""):i;if(t&&r&&f&&n==="tree")return{username:t,name:r,branch:f,filePath:l}}function E({username:e,name:o,branch:t,filePath:r}){let n=`https://api.github.com/repos/${e}/${o}/contents`,i=`${r?`/${r}`:""}/package.json`;return w(n+i+`?ref=${t}`)}function C(e){try{let o=new URL(e);return w(o.href)}catch{return w(`https://api.github.com/repos/vercel/next.js/contents/examples/${encodeURIComponent(e)}`)}}import B from"chalk";import J from"cross-spawn";import xo from"ora";async function L(e,o){let t=["install"];return o||(console.log(B.yellow(`You appear to be offline.
Falling back to the local cache.`)),t.push("--offline")),new Promise((r,n)=>{J(e,t,{stdio:"inherit",env:{...process.env,ADBLOCK:"1",NODE_ENV:"development",DISABLE_OPENCOLLECTIVE:"1"}}).on("close",s=>{if(s!==0){n({command:`${e} ${t.join(" ")}`});return}r()})})}import x from"fs";async function U(e){try{return await x.promises.access(e,(x.constants||x).W_OK),!0}catch{return!1}}import T from"fs";function g(e,o={recursive:!0}){return T.promises.mkdir(e,o)}async function _({appPath:e,example:o}){let t;if(o){let a;try{a=new URL(o)}catch(m){m.code!=="ERR_INVALID_URL"&&(console.error(m),process.exit(1))}a?(a.origin!=="https://github.com"&&(console.error(`URL inv\xE1lida: ${c.red(`"${o}"`)}. Apenas reposit\xF3rios do GitHui s\xE3o permitidos. Por favor, use uma URL de um reposit\xF3rio do GitHub e tente novamente.`),process.exit(1)),t=await P(a),t||(console.error(`Pasta inv\xE1lida nessa URL do GitHub: ${c.red(`"${o}"`)}. Por favor, ajuste a URL e tente novamente.`),process.exit(1)),await E(t)||(console.error(`N\xE3o podemos encontrar a localiza\xE7\xE3o do reposit\xF3rio ${c.red(`"${o}"`)}. Por favor, verifique se o reposit\xF3rio existe e tente novamente.`),process.exit(1))):o!=="__internal-testing-retry"&&(await C(o)||(console.error(`Could not locate an example named ${c.red(`"${o}"`)}. It could be due to the following:
`,`1. Your spelling of example ${c.red(`"${o}"`)} might be incorrect.
`,"2. You might not be connected to the internet or you are behind a proxy."),process.exit(1)))}let r=u.resolve(e);await U(u.dirname(r))||(console.error("A aplica\xE7\xE3o n\xE3o pode ser escrita, por favor verifique as permiss\xF5es da pasta e tente novamente."),process.exit(1));let n=u.basename(r);await g(r);let i="yarn",s=process.cwd();console.log(`Criando um novo projeto Gseller em ${c.green(r)}.`),console.log(),process.chdir(r);let l=u.join(r,"package.json"),f=!1;if(o){try{if(t){let a=t;console.log(`Baixando arquivos do reposit\xF3rio ${c.cyan(o)}. Isso pode demorar um pouco.`),console.log(),await A(()=>I(r,a),{retries:3})}else console.log(`Baixando arquivos do reposit\xF3rio ${c.cyan(o)}. Isso pode demorar um pouco.`),console.log(),await A(()=>k(r,o),{retries:3})}catch{}f=Y.existsSync(l),f&&(console.log("Installing packages. This might take a couple of minutes."),console.log(),await L("yarn",!0),console.log())}let d;u.join(s,n)===e?d=n:d=e,console.log(`${c.green("Sucesso!")} Criando ${n} em ${e}`)}import h from"chalk";var p={error(...e){console.log(h.red(...e))},warn(...e){console.log(h.yellow(...e))},info(...e){console.log(h.cyan(...e))},success(...e){console.log(h.green(...e))},break(){console.log("")}};var Z=y.object({cwd:y.string(),yes:y.boolean()}),N=new H().command("init").description("Iniciar projeto boilerplate Gseller").option("-y, --yes","pular a confirma\xE7\xE3o de cria\xE7\xE3o do projeto",!1).option("-c, --cwd <cwd>","Diret\xF3rio de trabalho. O padr\xE3o \xE9 o diret\xF3rio atual.",process.cwd()).action(async e=>{let o="https://github.com/mateusp7/grv";try{let t=Z.parse(e),r=K.resolve(t.cwd);D(r)||(p.error(`O caminho ${r} n\xE3o existe. Por favor, tente novamente.`),process.exit(1));let n=await M(r);await oo(n,o),p.info(""),p.info("Inicializa\xE7\xE3o do projeto realizada com sucesso."),p.info("")}catch{}});async function M(e){let o=s=>Q.cyan(s),t=await X([{type:"text",name:"path",message:"Qual o nome do projeto?"}]);p.info("");let r=`${e}/${t.path}`;D(r)&&(p.warn(`J\xE1 existe uma pasta com o nome de ${o(t.path)}`),process.exit(1));let i=V(`Criando pasta ${o(t.path)} do projeto.`).start();return await g(e+"/"+t.path),i.succeed(),r}async function oo(e,o){try{await _({appPath:e,example:o})}catch{}}var $=new eo;async function to(){$.name("gseller").description("Criar um template teste").version("1.0.0","-v, --version","display the version number"),$.addCommand(N),$.parse()}to();
//# sourceMappingURL=index.js.map