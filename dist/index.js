#!/usr/bin/env node
import{Command as q}from"commander";import{Command as S}from"commander";import{existsSync as U,promises as _}from"fs";import k from"ora";import f from"path";import D from"chalk";import T from"prompts";import{z as m}from"zod";import xo from"async-retry";import vo from"chalk";import W from"got";import{Stream as C}from"stream";import J from"tar";import{promisify as $}from"util";var V=$(C.pipeline);import Q from"got";import oo from"chalk";import to from"cross-spawn";import ro from"ora";import{cosmiconfig as R}from"cosmiconfig";import p from"path";import{loadConfig as L}from"tsconfig-paths";import{z as n}from"zod";import{createMatchPath as I}from"tsconfig-paths";async function l(o,e){return I(e.absoluteBaseUrl,e.paths)(o,void 0,()=>!0,[".ts",".tsx"])}var u="@/components",h="@/lib/utils",w="src/app/globals.css",x="tailwind.config.js",y="src/app/graphql",E=R("components",{searchPlaces:["components.json"]}),a=n.object({tsx:n.coerce.boolean().default(!0),graphql:n.string(),tailwind:n.object({config:n.string(),css:n.string()}),aliases:n.object({components:n.string(),utils:n.string()})}).strict(),P=a.extend({resolvedPaths:n.object({tailwindConfig:n.string(),tailwindCss:n.string(),utils:n.string(),components:n.string()})});async function v(o){let e=await A(o);return e?await j(o,e):null}async function j(o,e){let t=L(o);if(t.resultType==="failed")throw new Error(`Failed to load ${e.tsx?"tsconfig":"jsconfig"}.json. ${t.message??""}`.trim());return P.parse({...e,resolvedPaths:{graphql:p.resolve(o,e.graphql),tailwindConfig:p.resolve(o,e.tailwind.config),tailwindCss:p.resolve(o,e.tailwind.css),utils:await l(e.aliases.utils,t),components:await l(e.aliases.components,t)}})}async function A(o){try{let e=await E.search(o);return e?a.parse(e.config):null}catch{throw new Error(`Invalid configuration found in ${o}/components.json.`)}}import c from"chalk";var i={error(...o){console.log(c.red(...o))},warn(...o){console.log(c.yellow(...o))},info(...o){console.log(c.cyan(...o))},success(...o){console.log(c.green(...o))},break(){console.log("")}};var F=m.object({cwd:m.string(),yes:m.boolean()}),b=new S().command("init").description("Iniciar projeto boilerplate Gseller").option("-y, --yes","pular a confirma\xE7\xE3o de cria\xE7\xE3o do projeto",!1).option("-c, --cwd <cwd>","Diret\xF3rio de trabalho. O padr\xE3o \xE9 o diret\xF3rio atual.",process.cwd()).action(async o=>{let e="https://github.com/mateusp7/grv";try{let t=F.parse(o),r=f.resolve(t.cwd);U(r)||(i.error(`O caminho ${r} n\xE3o existe. Por favor, tente novamente.`),process.exit(1));let s=await v(r),g=await N(s);i.info(""),i.info("Inicializa\xE7\xE3o do projeto realizada com sucesso."),i.info("")}catch{}});async function N(o=null){let e=g=>D.cyan(g),t=await T([{type:"text",name:"graphql",message:`Aonde est\xE1 localizado a pasta ${e("graphql")}?`,initial:o?.graphql??y},{type:"text",name:"tailwindConfig",message:`Aonde est\xE1 localizado a pasta ${e("tailwind.config.js")}?`,initial:o?.tailwind.config??x},{type:"text",name:"tailwindCss",message:`Aonde est\xE1 localizado o arquivo ${e("global CSS")}?`,initial:o?.tailwind.css??w},{type:"text",name:"components",message:`Configure o alias de importa\xE7\xE3o para ${e("components")}:`,initial:o?.aliases.components??u},{type:"text",name:"utils",message:`Configure o alias de importa\xE7\xE3o para ${e("utils")}:`,initial:o?.aliases.utils??h}]),r=a.parse({tsx:!0,graphql:t.graphql,tailwind:{config:t.tailwindConfig,css:t.tailwindCss},aliases:{utils:t.utils,components:t.components}}),s=f.resolve();return i.info(""),O(s,r),s}async function O(o,e){i.info("");let t=k("Criando arquivo gseller.json...").start(),r=f.resolve(o,"gseller.json");await _.writeFile(r,JSON.stringify(e,null,2),"utf-8"),t.succeed()}var d=new q;async function z(){d.name("gseller").description("Criar um template teste").version("1.0.0","-v, --version","display the version number"),d.addCommand(b),d.parse()}z();
//# sourceMappingURL=index.js.map