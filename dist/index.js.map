{"version":3,"sources":["../src/index.ts","../src/commands/init.ts","../src/helpers/constants.ts","../src/helpers/get-config.ts","../src/helpers/resolve-import.ts","../src/helpers/get-package-manager.ts","../src/helpers/logger.ts","../src/helpers/handler-error.ts"],"sourcesContent":["#!/usr/bin/env node\r\nimport { Command } from 'commander'\r\nimport { init } from './commands/init'\r\n\r\nconst program = new Command()\r\nasync function main() {\r\n  program\r\n    .name('gseller')\r\n    .description('Criar um template teste')\r\n    .version('1.0.0', '-v, --version', 'display the version number')\r\n\r\n  program.addCommand(init)\r\n  program.parse()\r\n}\r\n\r\nmain()\r\n","import { Command } from 'commander'\r\nimport { existsSync, promises as fs } from 'fs'\r\nimport ora from 'ora'\r\nimport path from 'path'\r\n\r\nimport chalk from 'chalk'\r\nimport { execa } from 'execa'\r\nimport template from 'lodash.template'\r\nimport prompts from 'prompts'\r\nimport { z } from 'zod'\r\nimport {\r\n  DEFAULT_COMPONENTS,\r\n  DEFAULT_GRAPHQL,\r\n  DEFAULT_TAILWIND_CONFIG,\r\n  DEFAULT_TAILWIND_CSS,\r\n  DEFAULT_UTILS,\r\n  PROJECT_DEPENDENCIES,\r\n  TAILWIND_CONFIG,\r\n  TAILWIND_CONFIG_TS,\r\n  UTILS,\r\n  UTILS_JS,\r\n} from '../helpers/constants'\r\nimport {\r\n  Config,\r\n  getConfig,\r\n  rawConfigSchema,\r\n  resolveConfigPaths,\r\n} from '../helpers/get-config'\r\nimport { getPackageManager } from '../helpers/get-package-manager'\r\nimport { handleError } from '../helpers/handler-error'\r\nimport { logger } from '../helpers/logger'\r\n\r\nconst initOptionsSchema = z.object({\r\n  cwd: z.string(),\r\n  yes: z.boolean(),\r\n})\r\n\r\nexport const init = new Command()\r\n  .command('init')\r\n  .description('Iniciar projeto boilerplate Gseller')\r\n  .option('-y, --yes', 'Pular a confirmação de criação do projeto', false)\r\n  .option(\r\n    '-c, --cwd <cwd>',\r\n    'Diretório de trabalho. O padrão é o diretório atual.',\r\n    process.cwd()\r\n  )\r\n  .action(async (opts) => {\r\n    try {\r\n      const options = initOptionsSchema.parse(opts)\r\n      const cwd = path.resolve(options.cwd)\r\n\r\n      if (!existsSync(cwd)) {\r\n        logger.error(`O caminho ${cwd} não existe. Por favor, tente novamente.`)\r\n        process.exit(1)\r\n      }\r\n\r\n      const existingConfig = await getConfig(cwd)\r\n      const promptConfig = await promptForConfig(existingConfig)\r\n\r\n      await runInit(cwd, promptConfig)\r\n\r\n      logger.info('')\r\n      logger.info(`Inicialização do projeto realizada com sucesso.`)\r\n      logger.info('')\r\n    } catch (err) {\r\n      handleError(err)\r\n    }\r\n  })\r\n\r\nexport async function promptForConfig(defaultConfig: Config | null = null) {\r\n  const highlight = (text: string) => chalk.cyan(text)\r\n\r\n  const options = await prompts([\r\n    {\r\n      type: 'text',\r\n      name: 'graphql',\r\n      message: `Aonde está localizado a pasta ${highlight('graphql')}?`,\r\n      initial: defaultConfig?.graphql ?? DEFAULT_GRAPHQL,\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'tailwindConfig',\r\n      message: `Aonde está localizado a pasta ${highlight(\r\n        'tailwind.config.js'\r\n      )}?`,\r\n      initial: defaultConfig?.tailwind.config ?? DEFAULT_TAILWIND_CONFIG,\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'tailwindCss',\r\n      message: `Aonde está localizado o arquivo ${highlight('global CSS')}?`,\r\n      initial: defaultConfig?.tailwind.css ?? DEFAULT_TAILWIND_CSS,\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'components',\r\n      message: `Configure o alias de importação para ${highlight(\r\n        'components'\r\n      )}:`,\r\n      initial: defaultConfig?.aliases['components'] ?? DEFAULT_COMPONENTS,\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'utils',\r\n      message: `Configure o alias de importação para ${highlight('utils')}:`,\r\n      initial: defaultConfig?.aliases['utils'] ?? DEFAULT_UTILS,\r\n    },\r\n  ])\r\n\r\n  const config = rawConfigSchema.parse({\r\n    tsx: true,\r\n    graphql: options.graphql,\r\n    tailwind: {\r\n      config: options.tailwindConfig,\r\n      css: options.tailwindCss,\r\n    },\r\n    aliases: {\r\n      utils: options.utils,\r\n      components: options.components,\r\n    },\r\n  })\r\n\r\n  const resolvedProjectPath = path.resolve()\r\n  logger.info('')\r\n\r\n  return createGsellerJson(resolvedProjectPath, config)\r\n}\r\n\r\nexport async function createGsellerJson(\r\n  cwd: string,\r\n  config: z.infer<typeof rawConfigSchema>\r\n) {\r\n  logger.info('')\r\n  const spinner = ora(`Criando arquivo ${chalk.blue('gseller.json')}`).start()\r\n\r\n  const targetPath = path.resolve(cwd, 'gseller.json')\r\n  await fs.writeFile(targetPath, JSON.stringify(config, null, 2), 'utf-8')\r\n  spinner.succeed()\r\n  logger.info('')\r\n\r\n  return await resolveConfigPaths(cwd, config)\r\n}\r\n\r\nexport async function runInit(cwd: string, config: Config) {\r\n  for (const [key, resolvedPath] of Object.entries(config.resolvedPaths)) {\r\n    // Determine if the path is a file or directory.\r\n    // TODO: is there a better way to do this?\r\n    let dirname = path.extname(resolvedPath)\r\n      ? path.dirname(resolvedPath)\r\n      : resolvedPath\r\n\r\n    // If the utils alias is set to something like \"@/lib/utils\",\r\n    // assume this is a file and remove the \"utils\" file name.\r\n    // TODO: In future releases we should add support for individual utils.\r\n    if (key === 'utils' && resolvedPath.endsWith('/utils')) {\r\n      // Remove /utils at the end.\r\n      dirname = dirname.replace(/\\/utils$/, '')\r\n    }\r\n\r\n    if (!existsSync(dirname)) {\r\n      await fs.mkdir(dirname, { recursive: true })\r\n    }\r\n  }\r\n\r\n  const extension = config.tsx ? 'ts' : 'js'\r\n\r\n  const tailwindConfigExtension = path.extname(\r\n    config.resolvedPaths.tailwindConfig\r\n  )\r\n\r\n  let tailwindConfigTemplate: string\r\n  if (tailwindConfigExtension === '.ts') {\r\n    tailwindConfigTemplate = TAILWIND_CONFIG_TS\r\n  } else {\r\n    tailwindConfigTemplate = TAILWIND_CONFIG\r\n  }\r\n\r\n  const spinnerWriteTailwindConfig = ora(\r\n    `Criando arquivo ${chalk.blue('tailwind.config.ts')}`\r\n  )?.start()\r\n  await fs.writeFile(\r\n    config.resolvedPaths.tailwindConfig,\r\n    template(tailwindConfigTemplate)({\r\n      extension,\r\n      prefix: '',\r\n    }),\r\n    'utf8'\r\n  )\r\n  spinnerWriteTailwindConfig.succeed()\r\n  logger.info('')\r\n\r\n  const spinnerWriteUtils = ora(\r\n    `Criando arquivo ${chalk.blue('utils')}`\r\n  )?.start()\r\n  await fs.writeFile(\r\n    `${config.resolvedPaths.utils}.${extension}`,\r\n    extension === 'ts' ? UTILS : UTILS_JS,\r\n    'utf8'\r\n  )\r\n  spinnerWriteUtils.succeed()\r\n  logger.info('')\r\n\r\n  const dependenciesSpinner = ora(`Instalando dependências...`)?.start()\r\n  const packageManager = await getPackageManager(cwd)\r\n\r\n  const deps = [...PROJECT_DEPENDENCIES]\r\n\r\n  logger.info('')\r\n  logger.info('')\r\n  logger.info('Dependências')\r\n  logger.info('')\r\n  deps.forEach((dep) => {\r\n    logger.info(`- ${dep}`)\r\n  })\r\n  logger.info('')\r\n\r\n  await execa(\r\n    packageManager,\r\n    [packageManager === 'npm' ? 'install' : 'add', ...deps],\r\n    {\r\n      cwd,\r\n    }\r\n  )\r\n\r\n  dependenciesSpinner?.succeed()\r\n}\r\n","export const DEFAULT_COMPONENTS = '@/components'\r\nexport const DEFAULT_UTILS = '@/lib/utils'\r\nexport const DEFAULT_TAILWIND_CSS = 'src/app/globals.css'\r\nexport const DEFAULT_TAILWIND_CONFIG = 'tailwind.config.ts'\r\nexport const DEFAULT_GRAPHQL = 'src/app/graphql'\r\nexport const PROJECT_DEPENDENCIES = [\r\n  'tailwindcss-animate',\r\n  'class-variance-authority',\r\n  'clsx',\r\n  'tailwind-merge',\r\n  'react-icons',\r\n]\r\n\r\nexport const UTILS = `import { type ClassValue, clsx } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n`\r\n\r\nexport const UTILS_JS = `import { clsx } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n`\r\n\r\nexport const TAILWIND_CONFIG = `/** @type {import('tailwindcss').Config} */\r\nmodule.exports = {\r\n  darkMode: [\"class\"],\r\n  content: [\r\n    './pages/**/*.{<%- extension %>,<%- extension %>x}',\r\n    './components/**/*.{<%- extension %>,<%- extension %>x}',\r\n    './app/**/*.{<%- extension %>,<%- extension %>x}',\r\n    './src/**/*.{<%- extension %>,<%- extension %>x}',\r\n  ],\r\n  prefix: \"<%- prefix %>\",\r\n  theme: {\r\n    container: {\r\n      center: true,\r\n      padding: \"2rem\",\r\n      screens: {\r\n        \"2xl\": \"1400px\",\r\n      },\r\n    },\r\n    extend: {\r\n      keyframes: {\r\n        \"accordion-down\": {\r\n          from: { height: \"0\" },\r\n          to: { height: \"var(--radix-accordion-content-height)\" },\r\n        },\r\n        \"accordion-up\": {\r\n          from: { height: \"var(--radix-accordion-content-height)\" },\r\n          to: { height: \"0\" },\r\n        },\r\n      },\r\n      animation: {\r\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\r\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\r\n      },\r\n    },\r\n  },\r\n  plugins: [require(\"tailwindcss-animate\")],\r\n}`\r\n\r\nexport const TAILWIND_CONFIG_WITH_VARIABLES = `/** @type {import('tailwindcss').Config} */\r\nmodule.exports = {\r\n  darkMode: [\"class\"],\r\n  content: [\r\n    './pages/**/*.{<%- extension %>,<%- extension %>x}',\r\n    './components/**/*.{<%- extension %>,<%- extension %>x}',\r\n    './app/**/*.{<%- extension %>,<%- extension %>x}',\r\n    './src/**/*.{<%- extension %>,<%- extension %>x}',\r\n  ],\r\n  prefix: \"<%- prefix %>\",\r\n  theme: {\r\n    container: {\r\n      center: true,\r\n      padding: \"2rem\",\r\n      screens: {\r\n        \"2xl\": \"1400px\",\r\n      },\r\n    },\r\n    extend: {\r\n      colors: {\r\n        border: \"hsl(var(--border))\",\r\n        input: \"hsl(var(--input))\",\r\n        ring: \"hsl(var(--ring))\",\r\n        background: \"hsl(var(--background))\",\r\n        foreground: \"hsl(var(--foreground))\",\r\n        primary: {\r\n          DEFAULT: \"hsl(var(--primary))\",\r\n          foreground: \"hsl(var(--primary-foreground))\",\r\n        },\r\n        secondary: {\r\n          DEFAULT: \"hsl(var(--secondary))\",\r\n          foreground: \"hsl(var(--secondary-foreground))\",\r\n        },\r\n        destructive: {\r\n          DEFAULT: \"hsl(var(--destructive))\",\r\n          foreground: \"hsl(var(--destructive-foreground))\",\r\n        },\r\n        muted: {\r\n          DEFAULT: \"hsl(var(--muted))\",\r\n          foreground: \"hsl(var(--muted-foreground))\",\r\n        },\r\n        accent: {\r\n          DEFAULT: \"hsl(var(--accent))\",\r\n          foreground: \"hsl(var(--accent-foreground))\",\r\n        },\r\n        popover: {\r\n          DEFAULT: \"hsl(var(--popover))\",\r\n          foreground: \"hsl(var(--popover-foreground))\",\r\n        },\r\n        card: {\r\n          DEFAULT: \"hsl(var(--card))\",\r\n          foreground: \"hsl(var(--card-foreground))\",\r\n        },\r\n      },\r\n      borderRadius: {\r\n        lg: \"var(--radius)\",\r\n        md: \"calc(var(--radius) - 2px)\",\r\n        sm: \"calc(var(--radius) - 4px)\",\r\n      },\r\n      keyframes: {\r\n        \"accordion-down\": {\r\n          from: { height: \"0\" },\r\n          to: { height: \"var(--radix-accordion-content-height)\" },\r\n        },\r\n        \"accordion-up\": {\r\n          from: { height: \"var(--radix-accordion-content-height)\" },\r\n          to: { height: \"0\" },\r\n        },\r\n      },\r\n      animation: {\r\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\r\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\r\n      },\r\n    },\r\n  },\r\n  plugins: [require(\"tailwindcss-animate\")],\r\n}`\r\n\r\nexport const TAILWIND_CONFIG_TS = `import type { Config } from \"tailwindcss\"\r\n\r\nconst config = {\r\n  darkMode: [\"class\"],\r\n  content: [\r\n    './pages/**/*.{<%- extension %>,<%- extension %>x}',\r\n    './components/**/*.{<%- extension %>,<%- extension %>x}',\r\n    './app/**/*.{<%- extension %>,<%- extension %>x}',\r\n    './src/**/*.{<%- extension %>,<%- extension %>x}',\r\n  ],\r\n  prefix: \"<%- prefix %>\",\r\n  theme: {\r\n    container: {\r\n      center: true,\r\n      padding: \"2rem\",\r\n      screens: {\r\n        \"2xl\": \"1400px\",\r\n      },\r\n    },\r\n    extend: {\r\n      keyframes: {\r\n        \"accordion-down\": {\r\n          from: { height: \"0\" },\r\n          to: { height: \"var(--radix-accordion-content-height)\" },\r\n        },\r\n        \"accordion-up\": {\r\n          from: { height: \"var(--radix-accordion-content-height)\" },\r\n          to: { height: \"0\" },\r\n        },\r\n      },\r\n      animation: {\r\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\r\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\r\n      },\r\n    },\r\n  },\r\n  plugins: [require(\"tailwindcss-animate\")],\r\n} satisfies Config\r\n\r\nexport default config`\r\n\r\nexport const TAILWIND_CONFIG_TS_WITH_VARIABLES = `import type { Config } from \"tailwindcss\"\r\n\r\nconst config = {\r\n  darkMode: [\"class\"],\r\n  content: [\r\n    './pages/**/*.{<%- extension %>,<%- extension %>x}',\r\n    './components/**/*.{<%- extension %>,<%- extension %>x}',\r\n    './app/**/*.{<%- extension %>,<%- extension %>x}',\r\n    './src/**/*.{<%- extension %>,<%- extension %>x}',\r\n\t],\r\n  prefix: \"<%- prefix %>\",\r\n  theme: {\r\n    container: {\r\n      center: true,\r\n      padding: \"2rem\",\r\n      screens: {\r\n        \"2xl\": \"1400px\",\r\n      },\r\n    },\r\n    extend: {\r\n      colors: {\r\n        border: \"hsl(var(--border))\",\r\n        input: \"hsl(var(--input))\",\r\n        ring: \"hsl(var(--ring))\",\r\n        background: \"hsl(var(--background))\",\r\n        foreground: \"hsl(var(--foreground))\",\r\n        primary: {\r\n          DEFAULT: \"hsl(var(--primary))\",\r\n          foreground: \"hsl(var(--primary-foreground))\",\r\n        },\r\n        secondary: {\r\n          DEFAULT: \"hsl(var(--secondary))\",\r\n          foreground: \"hsl(var(--secondary-foreground))\",\r\n        },\r\n        destructive: {\r\n          DEFAULT: \"hsl(var(--destructive))\",\r\n          foreground: \"hsl(var(--destructive-foreground))\",\r\n        },\r\n        muted: {\r\n          DEFAULT: \"hsl(var(--muted))\",\r\n          foreground: \"hsl(var(--muted-foreground))\",\r\n        },\r\n        accent: {\r\n          DEFAULT: \"hsl(var(--accent))\",\r\n          foreground: \"hsl(var(--accent-foreground))\",\r\n        },\r\n        popover: {\r\n          DEFAULT: \"hsl(var(--popover))\",\r\n          foreground: \"hsl(var(--popover-foreground))\",\r\n        },\r\n        card: {\r\n          DEFAULT: \"hsl(var(--card))\",\r\n          foreground: \"hsl(var(--card-foreground))\",\r\n        },\r\n      },\r\n      borderRadius: {\r\n        lg: \"var(--radius)\",\r\n        md: \"calc(var(--radius) - 2px)\",\r\n        sm: \"calc(var(--radius) - 4px)\",\r\n      },\r\n      keyframes: {\r\n        \"accordion-down\": {\r\n          from: { height: \"0\" },\r\n          to: { height: \"var(--radix-accordion-content-height)\" },\r\n        },\r\n        \"accordion-up\": {\r\n          from: { height: \"var(--radix-accordion-content-height)\" },\r\n          to: { height: \"0\" },\r\n        },\r\n      },\r\n      animation: {\r\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\r\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\r\n      },\r\n    },\r\n  },\r\n  plugins: [require(\"tailwindcss-animate\")],\r\n} satisfies Config\r\n\r\nexport default config`\r\n","import { cosmiconfig } from 'cosmiconfig'\r\nimport path from 'path'\r\nimport { loadConfig } from 'tsconfig-paths'\r\nimport { z } from 'zod'\r\nimport { resolveImport } from './resolve-import'\r\n\r\nconst explorer = cosmiconfig('components', {\r\n  searchPlaces: ['components.json'],\r\n})\r\n\r\nexport const rawConfigSchema = z\r\n  .object({\r\n    tsx: z.coerce.boolean().default(true),\r\n    graphql: z.string(),\r\n    tailwind: z.object({\r\n      config: z.string(),\r\n      css: z.string(),\r\n    }),\r\n    aliases: z.object({\r\n      components: z.string(),\r\n      utils: z.string(),\r\n    }),\r\n  })\r\n  .strict()\r\n\r\nexport type RawConfig = z.infer<typeof rawConfigSchema>\r\n\r\nexport const configSchema = rawConfigSchema.extend({\r\n  resolvedPaths: z.object({\r\n    graphql: z.string(),\r\n    tailwindConfig: z.string(),\r\n    tailwindCss: z.string(),\r\n    utils: z.string(),\r\n    components: z.string(),\r\n  }),\r\n})\r\n\r\nexport type Config = z.infer<typeof configSchema>\r\n\r\nexport async function getConfig(cwd: string) {\r\n  const config = await getRawConfig(cwd)\r\n\r\n  if (!config) {\r\n    return null\r\n  }\r\n\r\n  return await resolveConfigPaths(cwd, config)\r\n}\r\n\r\nexport async function resolveConfigPaths(cwd: string, config: RawConfig) {\r\n  // Read tsconfig.json.\r\n  const tsConfig = loadConfig(cwd)\r\n\r\n  if (tsConfig.resultType === 'failed') {\r\n    throw new Error(\r\n      `Failed to load ${config.tsx ? 'tsconfig' : 'jsconfig'}.json. ${\r\n        tsConfig.message ?? ''\r\n      }`.trim()\r\n    )\r\n  }\r\n\r\n  return configSchema.parse({\r\n    ...config,\r\n    resolvedPaths: {\r\n      graphql: path.resolve(cwd, config.graphql),\r\n      tailwindConfig: path.resolve(cwd, config.tailwind.config),\r\n      tailwindCss: path.resolve(cwd, config.tailwind.css),\r\n      utils: await resolveImport(config.aliases['utils'], tsConfig),\r\n      components: await resolveImport(config.aliases['components'], tsConfig),\r\n    },\r\n  })\r\n}\r\n\r\nexport async function getRawConfig(cwd: string): Promise<RawConfig | null> {\r\n  try {\r\n    const configResult = await explorer.search(cwd)\r\n\r\n    if (!configResult) {\r\n      return null\r\n    }\r\n\r\n    return rawConfigSchema.parse(configResult.config)\r\n  } catch (error) {\r\n    throw new Error(`Invalid configuration found in ${cwd}/components.json.`)\r\n  }\r\n}\r\n","import { createMatchPath, type ConfigLoaderSuccessResult } from 'tsconfig-paths'\r\n\r\nexport async function resolveImport(\r\n  importPath: string,\r\n  config: Pick<ConfigLoaderSuccessResult, 'absoluteBaseUrl' | 'paths'>\r\n) {\r\n  return createMatchPath(config.absoluteBaseUrl, config.paths)(\r\n    importPath,\r\n    undefined,\r\n    () => true,\r\n    ['.ts', '.tsx']\r\n  )\r\n}\r\n","import { detect } from '@antfu/ni'\r\n\r\nexport async function getPackageManager(\r\n  targetDir: string\r\n): Promise<'yarn' | 'pnpm' | 'bun' | 'npm'> {\r\n  const packageManager = await detect({ programmatic: true, cwd: targetDir })\r\n\r\n  if (packageManager === 'yarn@berry') return 'yarn'\r\n  if (packageManager === 'pnpm@6') return 'pnpm'\r\n  if (packageManager === 'bun') return 'bun'\r\n\r\n  return packageManager ?? 'npm'\r\n}\r\n","import chalk from 'chalk'\r\n\r\nexport const logger = {\r\n  error(...args: unknown[]) {\r\n    console.log(chalk.red(...args))\r\n  },\r\n  warn(...args: unknown[]) {\r\n    console.log(chalk.yellow(...args))\r\n  },\r\n  info(...args: unknown[]) {\r\n    console.log(chalk.cyan(...args))\r\n  },\r\n  success(...args: unknown[]) {\r\n    console.log(chalk.green(...args))\r\n  },\r\n  break() {\r\n    console.log('')\r\n  },\r\n}\r\n","import { logger } from './logger'\r\n\r\nexport function handleError(error: unknown) {\r\n  if (typeof error === 'string') {\r\n    logger.error(error)\r\n    process.exit(1)\r\n  }\r\n\r\n  if (error instanceof Error) {\r\n    logger.error(error.message)\r\n    process.exit(1)\r\n  }\r\n\r\n  logger.error('Something went wrong. Please try again.')\r\n  process.exit(1)\r\n}\r\n"],"mappings":"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","names":["Command","Command","existsSync","fs","ora","path","chalk","execa","template","prompts","z","DEFAULT_COMPONENTS","DEFAULT_UTILS","DEFAULT_TAILWIND_CSS","DEFAULT_TAILWIND_CONFIG","DEFAULT_GRAPHQL","PROJECT_DEPENDENCIES","UTILS","UTILS_JS","TAILWIND_CONFIG","TAILWIND_CONFIG_TS","cosmiconfig","path","loadConfig","z","createMatchPath","resolveImport","importPath","config","explorer","cosmiconfig","rawConfigSchema","z","configSchema","getConfig","cwd","config","getRawConfig","resolveConfigPaths","tsConfig","loadConfig","path","resolveImport","configResult","detect","getPackageManager","targetDir","packageManager","chalk","logger","args","handleError","error","logger","initOptionsSchema","z","init","Command","opts","options","cwd","path","existsSync","logger","existingConfig","getConfig","promptConfig","promptForConfig","runInit","err","handleError","defaultConfig","highlight","text","chalk","prompts","DEFAULT_GRAPHQL","DEFAULT_TAILWIND_CONFIG","DEFAULT_TAILWIND_CSS","DEFAULT_COMPONENTS","DEFAULT_UTILS","config","rawConfigSchema","resolvedProjectPath","createGsellerJson","spinner","ora","targetPath","fs","resolveConfigPaths","key","resolvedPath","dirname","extension","tailwindConfigExtension","tailwindConfigTemplate","TAILWIND_CONFIG_TS","TAILWIND_CONFIG","spinnerWriteTailwindConfig","template","spinnerWriteUtils","UTILS","UTILS_JS","dependenciesSpinner","packageManager","getPackageManager","deps","PROJECT_DEPENDENCIES","dep","execa","program","Command","main","init"]}