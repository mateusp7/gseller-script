{"version":3,"sources":["../src/index.ts","../src/commands/init.ts","../src/helpers/create-app.ts","../src/helpers/download.ts","../src/helpers/example.ts","../src/helpers/install.ts","../src/helpers/is-writeable.ts","../src/helpers/make-dir.ts","../src/helpers/logger.ts"],"sourcesContent":["#!/usr/bin/env node\r\nimport { Command } from 'commander'\r\nimport { init } from './commands/init'\r\n\r\nconst program = new Command()\r\nasync function main() {\r\n  program\r\n    .name('gseller')\r\n    .description('Criar um template teste')\r\n    .version('1.0.0', '-v, --version', 'display the version number')\r\n\r\n  program.addCommand(init)\r\n  program.parse()\r\n}\r\n\r\nmain()\r\n","import { Command } from 'commander'\r\nimport { existsSync } from 'fs'\r\nimport ora from 'ora'\r\nimport path from 'path'\r\n\r\nimport chalk from 'chalk'\r\nimport prompts from 'prompts'\r\nimport { z } from 'zod'\r\nimport { createApp } from '../helpers/create-app'\r\nimport { logger } from '../helpers/logger'\r\nimport { makeDir } from '../helpers/make-dir'\r\n\r\nconst initOptionsSchema = z.object({\r\n  cwd: z.string(),\r\n  yes: z.boolean(),\r\n})\r\n\r\nlet projectPath: string = ''\r\n\r\nexport const init = new Command()\r\n  .command('init')\r\n  .description('Iniciar projeto boilerplate Gseller')\r\n  .option('-y, --yes', 'pular a confirmação de criação do projeto', false)\r\n  .option(\r\n    '-c, --cwd <cwd>',\r\n    'Diretório de trabalho. O padrão é o diretório atual.',\r\n    process.cwd()\r\n  )\r\n  .action(async (opts) => {\r\n    const example = 'https://github.com/mateusp7/grv'\r\n\r\n    try {\r\n      const options = initOptionsSchema.parse(opts)\r\n      const cwd = path.resolve(options.cwd)\r\n\r\n      if (!existsSync(cwd)) {\r\n        logger.error(`O caminho ${cwd} não existe. Por favor, tente novamente.`)\r\n        process.exit(1)\r\n      }\r\n\r\n      const prompt = await promptQuestions()\r\n\r\n      await runInit(prompt, example)\r\n\r\n      logger.info('')\r\n      logger.info(`Inicialização do projeto realizada com sucesso.`)\r\n      logger.info('')\r\n    } catch (err) {}\r\n  })\r\n\r\nexport async function promptQuestions() {\r\n  const highlight = (text: string) => chalk.cyan(text)\r\n\r\n  const options = await prompts([\r\n    {\r\n      type: 'text',\r\n      name: 'path',\r\n      message: 'Qual o nome do projeto?',\r\n    },\r\n  ])\r\n\r\n  if (typeof options.path === 'string') {\r\n    projectPath = options.path.trim()\r\n  }\r\n\r\n  const resolvedProjectPath = path.resolve(projectPath)\r\n  const projectName = path.basename(resolvedProjectPath)\r\n\r\n  logger.info('')\r\n\r\n  const cwdPath = existsSync(resolvedProjectPath)\r\n\r\n  if (cwdPath) {\r\n    logger.warn(`Já existe uma pasta com o nome de ${highlight(projectName)}`)\r\n    process.exit(1)\r\n  }\r\n\r\n  const spinner = ora(\r\n    `Criando pasta ${highlight(projectName)} do projeto.`\r\n  ).start()\r\n\r\n  await makeDir(resolvedProjectPath)\r\n\r\n  spinner.succeed()\r\n\r\n  return resolvedProjectPath\r\n}\r\n\r\nexport async function runInit(cwd: string, example: string) {\r\n  // await addNextGlobal()\r\n  // await startNextProject(cwd)\r\n  try {\r\n    await createApp({\r\n      appPath: cwd,\r\n      example: example,\r\n    })\r\n  } catch (reason) {}\r\n}\r\n","import retry from 'async-retry'\r\nimport chalk from 'chalk'\r\nimport fs from 'fs'\r\nimport path from 'path'\r\nimport { downloadAndExtractExample, downloadAndExtractRepo } from './download'\r\nimport { existsInRepo, getRepoInfo, hasRepo } from './example'\r\nimport { install } from './install'\r\nimport { isWriteable } from './is-writeable'\r\nimport { makeDir } from './make-dir'\r\n\r\nexport type RepoInfo = {\r\n  username: string\r\n  name: string\r\n  branch: string\r\n  filePath: string\r\n}\r\n\r\nexport async function createApp({\r\n  appPath,\r\n  example,\r\n}: {\r\n  appPath: string\r\n  example: string\r\n}): Promise<void> {\r\n  let repoInfo: RepoInfo | undefined\r\n\r\n  if (example) {\r\n    let repoUrl: URL | undefined\r\n\r\n    try {\r\n      repoUrl = new URL(example)\r\n    } catch (error: unknown) {\r\n      const err = error as Error & { code: string | undefined }\r\n      if (err.code !== 'ERR_INVALID_URL') {\r\n        console.error(error)\r\n        process.exit(1)\r\n      }\r\n    }\r\n\r\n    if (repoUrl) {\r\n      if (repoUrl.origin !== 'https://github.com') {\r\n        console.error(\r\n          `URL inválida: ${chalk.red(\r\n            `\"${example}\"`\r\n          )}. Apenas repositórios do GitHui são permitidos. Por favor, use uma URL de um repositório do GitHub e tente novamente.`\r\n        )\r\n        process.exit(1)\r\n      }\r\n\r\n      repoInfo = await getRepoInfo(repoUrl)\r\n\r\n      if (!repoInfo) {\r\n        console.error(\r\n          `Pasta inválida nessa URL do GitHub: ${chalk.red(\r\n            `\"${example}\"`\r\n          )}. Por favor, ajuste a URL e tente novamente.`\r\n        )\r\n        process.exit(1)\r\n      }\r\n\r\n      const found = await hasRepo(repoInfo)\r\n\r\n      if (!found) {\r\n        console.error(\r\n          `Não podemos encontrar a localização do repositório ${chalk.red(\r\n            `\"${example}\"`\r\n          )}. Por favor, verifique se o repositório existe e tente novamente.`\r\n        )\r\n        process.exit(1)\r\n      }\r\n    } else if (example !== '__internal-testing-retry') {\r\n      const found = await existsInRepo(example)\r\n\r\n      if (!found) {\r\n        console.error(\r\n          `Could not locate an example named ${chalk.red(\r\n            `\"${example}\"`\r\n          )}. It could be due to the following:\\n`,\r\n          `1. Your spelling of example ${chalk.red(\r\n            `\"${example}\"`\r\n          )} might be incorrect.\\n`,\r\n          `2. You might not be connected to the internet or you are behind a proxy.`\r\n        )\r\n        process.exit(1)\r\n      }\r\n    }\r\n  }\r\n\r\n  const root = path.resolve(appPath)\r\n\r\n  if (!(await isWriteable(path.dirname(root)))) {\r\n    console.error(\r\n      'A aplicação não pode ser escrita, por favor verifique as permissões da pasta e tente novamente.'\r\n    )\r\n    process.exit(1)\r\n  }\r\n\r\n  const appName = path.basename(root)\r\n\r\n  await makeDir(root)\r\n  const useYarn = 'yarn'\r\n  const originalDirectory = process.cwd()\r\n\r\n  console.log(`Criando um novo projeto Gseller em ${chalk.green(root)}.`)\r\n  console.log()\r\n\r\n  process.chdir(root)\r\n\r\n  const packageJsonPath = path.join(root, 'package.json')\r\n  let hasPackageJson = false\r\n\r\n  if (example) {\r\n    try {\r\n      if (repoInfo) {\r\n        const repoInfo2 = repoInfo\r\n        console.log(\r\n          `Baixando arquivos do repositório ${chalk.cyan(\r\n            example\r\n          )}. Isso pode demorar um pouco.`\r\n        )\r\n        console.log()\r\n        await retry(() => downloadAndExtractRepo(root, repoInfo2), {\r\n          retries: 3,\r\n        })\r\n      } else {\r\n        console.log(\r\n          `Baixando arquivos do repositório ${chalk.cyan(\r\n            example\r\n          )}. Isso pode demorar um pouco.`\r\n        )\r\n        console.log()\r\n        await retry(() => downloadAndExtractExample(root, example), {\r\n          retries: 3,\r\n        })\r\n      }\r\n    } catch (reason) {}\r\n    hasPackageJson = fs.existsSync(packageJsonPath)\r\n    if (hasPackageJson) {\r\n      console.log('Installing packages. This might take a couple of minutes.')\r\n      console.log()\r\n\r\n      await install('yarn', true)\r\n      console.log()\r\n    }\r\n  }\r\n  let cdpath: string\r\n  if (path.join(originalDirectory, appName) === appPath) {\r\n    cdpath = appName\r\n  } else {\r\n    cdpath = appPath\r\n  }\r\n\r\n  console.log(`${chalk.green('Sucesso!')} Criando ${appName} em ${appPath}`)\r\n}\r\n","import { createWriteStream, promises as fs } from 'fs'\r\nimport got from 'got'\r\nimport { tmpdir } from 'os'\r\nimport { join } from 'path'\r\nimport { Stream } from 'stream'\r\nimport tar from 'tar'\r\nimport { promisify } from 'util'\r\nimport { RepoInfo } from './create-app'\r\n\r\nconst pipeline = promisify(Stream.pipeline)\r\n\r\nasync function downloadTar(url: string) {\r\n  const tempFile = join(tmpdir(), `next.js-cna-example.temp-${Date.now()}`)\r\n  await pipeline(got.stream(url), createWriteStream(tempFile))\r\n  return tempFile\r\n}\r\n\r\nexport async function downloadAndExtractRepo(\r\n  root: string,\r\n  { username, name, branch, filePath }: RepoInfo\r\n) {\r\n  const tempFile = await downloadTar(\r\n    `https://codeload.github.com/${username}/${name}/tar.gz/${branch}`\r\n  )\r\n\r\n  await tar.x({\r\n    file: tempFile,\r\n    cwd: root,\r\n    strip: filePath ? filePath.split('/').length + 1 : 1,\r\n    filter: (p) =>\r\n      p.startsWith(\r\n        `${name}-${branch.replace(/\\//g, '-')}${\r\n          filePath ? `/${filePath}/` : '/'\r\n        }`\r\n      ),\r\n  })\r\n\r\n  await fs.unlink(tempFile)\r\n}\r\n\r\nexport async function downloadAndExtractExample(root: string, name: string) {\r\n  if (name === '__internal-testing-retry') {\r\n    throw new Error('This is an internal example for testing the CLI.')\r\n  }\r\n\r\n  const tempFile = await downloadTar(\r\n    'https://codeload.github.com/vercel/next.js/tar.gz/canary'\r\n  )\r\n\r\n  await tar.x({\r\n    file: tempFile,\r\n    cwd: root,\r\n    strip: 2 + name.split('/').length,\r\n    filter: (p) => p.includes(`next.js-canary/examples/${name}/`),\r\n  })\r\n\r\n  await fs.unlink(tempFile)\r\n}\r\n","import got from 'got'\r\nimport { RepoInfo } from './create-app'\r\n\r\nexport async function isUrlOk(url: string): Promise<boolean> {\r\n  const res = await got.head(url).catch((e) => e)\r\n  return res.statusCode === 200\r\n}\r\n\r\nexport async function getRepoInfo(\r\n  url: URL,\r\n  examplePath?: string\r\n): Promise<RepoInfo | undefined> {\r\n  const [, username, name, t, _branch, ...file] = url.pathname.split('/')\r\n  const filePath = examplePath ? examplePath.replace(/^\\//, '') : file.join('/')\r\n\r\n  if (\r\n    // Support repos whose entire purpose is to be a Next.js example, e.g.\r\n    // https://github.com/:username/:my-cool-nextjs-example-repo-name.\r\n    t === undefined ||\r\n    // Support GitHub URL that ends with a trailing slash, e.g.\r\n    // https://github.com/:username/:my-cool-nextjs-example-repo-name/\r\n    // In this case \"t\" will be an empty string while the next part \"_branch\" will be undefined\r\n    (t === '' && _branch === undefined)\r\n  ) {\r\n    const infoResponse = await got(\r\n      `https://api.github.com/repos/${username}/${name}`\r\n    ).catch((e) => e)\r\n    if (infoResponse.statusCode !== 200) {\r\n      return\r\n    }\r\n    const info = JSON.parse(infoResponse.body)\r\n    return { username, name, branch: info['default_branch'], filePath }\r\n  }\r\n\r\n  // If examplePath is available, the branch name takes the entire path\r\n  const branch = examplePath\r\n    ? `${_branch}/${file.join('/')}`.replace(new RegExp(`/${filePath}|/$`), '')\r\n    : _branch\r\n\r\n  if (username && name && branch && t === 'tree') {\r\n    return { username, name, branch, filePath }\r\n  }\r\n}\r\n\r\nexport function hasRepo({\r\n  username,\r\n  name,\r\n  branch,\r\n  filePath,\r\n}: RepoInfo): Promise<boolean> {\r\n  const contentsUrl = `https://api.github.com/repos/${username}/${name}/contents`\r\n  const packagePath = `${filePath ? `/${filePath}` : ''}/package.json`\r\n\r\n  return isUrlOk(contentsUrl + packagePath + `?ref=${branch}`)\r\n}\r\n\r\nexport function existsInRepo(nameOrUrl: string): Promise<boolean> {\r\n  try {\r\n    const url = new URL(nameOrUrl)\r\n    return isUrlOk(url.href)\r\n  } catch {\r\n    return isUrlOk(\r\n      `https://api.github.com/repos/vercel/next.js/contents/examples/${encodeURIComponent(\r\n        nameOrUrl\r\n      )}`\r\n    )\r\n  }\r\n}\r\n","import chalk from 'chalk'\r\nimport spawn from 'cross-spawn'\r\nimport ora from 'ora'\r\n\r\nexport async function install(\r\n  /** Indicate which package manager to use. */\r\n  packageManager: string,\r\n  /** Indicate whether there is an active Internet connection.*/\r\n  isOnline: boolean\r\n): Promise<void> {\r\n  let args: string[] = ['install']\r\n  if (!isOnline) {\r\n    console.log(\r\n      chalk.yellow(\r\n        'You appear to be offline.\\nFalling back to the local cache.'\r\n      )\r\n    )\r\n    args.push('--offline')\r\n  }\r\n  /**\r\n   * Return a Promise that resolves once the installation is finished.\r\n   */\r\n  return new Promise((resolve, reject) => {\r\n    /**\r\n     * Spawn the installation process.\r\n     */\r\n    const child = spawn(packageManager, args, {\r\n      stdio: 'inherit',\r\n      env: {\r\n        ...process.env,\r\n        ADBLOCK: '1',\r\n        // we set NODE_ENV to development as pnpm skips dev\r\n        // dependencies when production\r\n        NODE_ENV: 'development',\r\n        DISABLE_OPENCOLLECTIVE: '1',\r\n      },\r\n    })\r\n    child.on('close', (code) => {\r\n      if (code !== 0) {\r\n        reject({ command: `${packageManager} ${args.join(' ')}` })\r\n        return\r\n      }\r\n      resolve()\r\n    })\r\n  })\r\n}\r\n\r\nexport async function addNextGlobal(): Promise<void> {\r\n  return new Promise((resolve, reject) => {\r\n    const spinner = ora(`Iniciando instalação do next globalmente`).start()\r\n    const child = spawn('npm', ['i', '-g', 'create-next-app'])\r\n    spinner.succeed()\r\n    child.on('close', (code) => {\r\n      if (code !== 0) {\r\n        spinner.fail(\r\n          'Erro ao instalar next globalmente. Por favor, tente novamente'\r\n        )\r\n        return reject(new Error('Failed'))\r\n      }\r\n      return resolve()\r\n    })\r\n  })\r\n}\r\n\r\nexport async function startNextProject(cwd: string): Promise<void> {\r\n  {\r\n    return new Promise((resolve, reject) => {\r\n      const spinner = ora(`Iniciando instalação do app next`).start()\r\n      const child = spawn('npx', ['create-next-app@latest', cwd], {\r\n        stdio: 'inherit',\r\n        cwd,\r\n      })\r\n      spinner.succeed()\r\n      child.on('close', (code) => {\r\n        if (code !== 0) {\r\n          return reject(new Error('Failed'))\r\n        }\r\n        return resolve()\r\n      })\r\n    })\r\n  }\r\n}\r\n","import fs from 'fs'\r\n\r\nexport async function isWriteable(directory: string): Promise<boolean> {\r\n  try {\r\n    await fs.promises.access(directory, (fs.constants || fs).W_OK)\r\n    return true\r\n  } catch (err) {\r\n    return false\r\n  }\r\n}\r\n","import fs from 'fs'\r\n\r\nexport function makeDir(\r\n  root: string,\r\n  options = { recursive: true }\r\n): Promise<string | undefined> {\r\n  return fs.promises.mkdir(root, options)\r\n}\r\n","import chalk from 'chalk'\r\n\r\nexport const logger = {\r\n  error(...args: unknown[]) {\r\n    console.log(chalk.red(...args))\r\n  },\r\n  warn(...args: unknown[]) {\r\n    console.log(chalk.yellow(...args))\r\n  },\r\n  info(...args: unknown[]) {\r\n    console.log(chalk.cyan(...args))\r\n  },\r\n  success(...args: unknown[]) {\r\n    console.log(chalk.green(...args))\r\n  },\r\n  break() {\r\n    console.log('')\r\n  },\r\n}\r\n"],"mappings":"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","names":["Command","Command","existsSync","ora","path","chalk","prompts","z","retry","chalk","fs","path","createWriteStream","fs","got","tmpdir","join","Stream","tar","promisify","pipeline","downloadTar","url","tempFile","downloadAndExtractRepo","root","username","name","branch","filePath","p","downloadAndExtractExample","got","isUrlOk","url","e","getRepoInfo","examplePath","username","name","t","_branch","file","filePath","infoResponse","info","branch","hasRepo","contentsUrl","packagePath","existsInRepo","nameOrUrl","chalk","spawn","ora","install","packageManager","isOnline","args","resolve","reject","code","fs","isWriteable","directory","fs","makeDir","root","options","createApp","appPath","example","repoInfo","repoUrl","error","chalk","getRepoInfo","hasRepo","existsInRepo","root","path","isWriteable","appName","makeDir","useYarn","originalDirectory","packageJsonPath","hasPackageJson","repoInfo2","retry","downloadAndExtractRepo","downloadAndExtractExample","fs","install","cdpath","chalk","logger","args","initOptionsSchema","z","projectPath","init","Command","opts","example","options","cwd","path","existsSync","logger","prompt","promptQuestions","runInit","highlight","text","chalk","prompts","resolvedProjectPath","projectName","spinner","ora","makeDir","createApp","program","Command","main","init"]}